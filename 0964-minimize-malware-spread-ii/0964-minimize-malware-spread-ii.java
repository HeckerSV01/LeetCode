class Solution {
    public int calculate(List<List<Integer>> adj,HashSet<Integer> set)
    {
        HashSet<Integer> inf=new HashSet<>(set);
        Queue<Integer> q=new LinkedList<>();
        for(int k:set)
        {
            q.add(k);
        }
        while(!q.isEmpty())
        {
            int cur=q.remove();
            for(int k:adj.get(cur))
            {
                if(!inf.contains(k))
                {
                    q.add(k);
                    inf.add(k);
                }
            }
        }
        return inf.size();
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        List<List<Integer>> adj=new ArrayList<>();
        int n=graph.length;
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(graph[i][j]==1)
                {
                    adj.get(i).add(j);
                }
            }
        }
        HashSet<Integer> set=new HashSet<>();
        for(int k:initial)
        {
            set.add(k);
        }
        int min=Integer.MAX_VALUE;
        int ans=-1;
        for(int i:initial)
        {
            List<Integer> cleared=new ArrayList<>(adj.get(i));
            for(int k:cleared)
            {
                adj.get(k).remove((Integer)i);
            }
            adj.get(i).clear();
            int count=calculate(adj,set);
            if(count<min||(count==min&&i<ans))
            {
                min=count;
                ans=i;
            }
            for(int k:cleared) 
            {
                adj.get(k).add(i);      
            }
            adj.set(i, cleared);
        }
        return ans;
    }
}